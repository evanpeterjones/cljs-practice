["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^?","~$gobj","~$goog.object","^A","^A","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^?","~$str","~$clojure.string","^G","^G","^C","^C","^E","^E"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","~:line",181,"~:column",7,"~:end-line",181,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^T",[["~$spec"]]]]],"~:doc","returns the spec as data"],"^;","~$cljs.spec.alpha/form","^N","docs/cljs/spec/alpha.cljs","^R",11,"~:method-params",["^T",[["^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"~:variadic?",false,"^O",181,"~:ret-tag","~$any","^Q",181,"~:max-fixed-arity",1,"~:fn-var",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","returns the spec as data"],"~$nilable-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1410,"^P",19,"^Q",1410,"^R",31,"~:skip-wiki",true,"^S",["^T",["^U",["^T",[["^K","~$pred","~$gfn"]]]]],"^W","Do not call this directly, use 'nilable'"],"^;","~$cljs.spec.alpha/nilable-impl","^N","docs/cljs/spec/alpha.cljs","^R",31,"^Y",["^T",[["^K","^17","^18"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1410,"^11","~$cljs.spec.alpha/t_cljs$spec$alpha30817","^Q",1410,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^K","^17","^18"]]]]],"^W","Do not call this directly, use 'nilable'"],"~$t_cljs$spec$alpha30524",["^ ","~:num-fields",9,"~:protocols",["^4",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","~$cljs.spec.alpha/Specize","~$cljs.core/IWithMeta"]],"^;","~$cljs.spec.alpha/t_cljs$spec$alpha30524","^N","docs/cljs/spec/alpha.cljs","~:type",true,"~:anonymous",true,"^P",5,"^O",697,"~:record",false,"~:tag","~$function","~:skip-protocol-flag",["^4",["^1?","^1A"]]],"~$*recursion-limit*",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",21,"^P",16,"^Q",21,"^R",33,"~:dynamic",true],"^;","~$cljs.spec.alpha/*recursion-limit*","^N","docs/cljs/spec/alpha.cljs","^R",33,"^P",1,"^1J",true,"^O",21,"^Q",21,"^1F","^12","^W","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",35,"^P",16,"^Q",35,"^R",34,"^1J",true],"^;","~$cljs.spec.alpha/*coll-error-limit*","^N","docs/cljs/spec/alpha.cljs","^R",34,"^P",1,"^1J",true,"^O",35,"^Q",35,"^1F","^12","^W","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",841,"^P",16,"^Q",841,"^R",26,"~:private",true],"^1O",true,"^;","~$cljs.spec.alpha/empty-coll","^N","docs/cljs/spec/alpha.cljs","^R",26,"^P",1,"^O",841,"^Q",841,"^1F","~$cljs.core/IMap"],"~$explain-printer",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",235,"^P",7,"^Q",235,"^R",22,"^S",["^T",["^U",["^T",[["~$ed"]]]]],"^W","Default printer for explain-data. nil indicates a successful validation."],"^;","~$cljs.spec.alpha/explain-printer","^N","docs/cljs/spec/alpha.cljs","^R",22,"^Y",["^T",[["^1S"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",235,"^11","~$clj-nil","^Q",235,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^1S"]]]]],"^W","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1159,"^P",8,"^Q",1159,"^R",18,"^1O",true,"^S",["^T",["^U",["^T",[["^K","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/op-explain","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["^K","~$p","^1W","^1X","^1Y","^1Z"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1159,"^11",["^4",["~$cljs.core/IVector","^12","^1U"]],"^Q",1159,"^13",6,"^14",true,"^S",["^T",["^U",["^T",[["^K","~$p","^1W","^1X","^1Y","^1Z"]]]]]],"~$Specize",["^ ","^M",["^ ","~:protocol-symbol",true,"^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",21,"^P",14,"^O",131,"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^K"]]]],"^Q",131,"~:sigs",["^ ","~:specize*",["^ ","^;","^25","^S",["^T",[["~$_"],["~$_","^K"]]],"^W",null]],"~:jsdoc",["^T",["@interface"]]],"^22",true,"^;","^1@","^N","docs/cljs/spec/alpha.cljs","^R",21,"^P",1,"^O",131,"^23",["^ ","^24",["^ ","^25",[["~$_"],["~$_","^K"]]]],"~:info",null,"^Q",131,"^1F","^12","^26",["^ ","^27",["^ ","^;","^25","^S",["^T",[["~$_"],["~$_","^K"]]],"^W",null]],"~:impls",["^4",["~$cljs.spec.alpha/t_cljs$spec$alpha30515","~$cljs.spec.alpha/t_cljs$spec$alpha30782","~$cljs.spec.alpha/t_cljs$spec$alpha30608","~$cljs.spec.alpha/t_cljs$spec$alpha30434","~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha30582","~$cljs.spec.alpha/t_cljs$spec$alpha30501","~$default","~$cljs.spec.alpha/t_cljs$spec$alpha30789","~$cljs.core/PersistentHashSet","~$cljs.spec.alpha/t_cljs$spec$alpha30490","~$cljs.spec.alpha/t_cljs$spec$alpha30596","~$cljs.spec.alpha/t_cljs$spec$alpha30814","^1B","~$cljs.core/PersistentTreeSet","~$cljs.core/Symbol","^1:"]],"^28",["^T",["@interface"]]],"~$alt-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1044,"^P",19,"^Q",1044,"^R",27,"^16",true,"^S",["^T",["^U",["^T",[["~$ks","~$ps","~$forms"]]]]],"^W","Do not call this directly, use 'alt'"],"^;","~$cljs.spec.alpha/alt-impl","^N","docs/cljs/spec/alpha.cljs","^R",27,"^Y",["^T",[["^2K","^2L","^2M"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1044,"^11",["^4",["~$clj","^12"]],"^Q",1044,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^2K","^2L","^2M"]]]]],"^W","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",656,"^P",8,"^Q",656,"^R",18,"^1O",true,"^S",["^T",["^U",["^T",[["~$tag","~$ret"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/tagged-ret","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["^2Q","^2R"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",656,"^11","~$cljs.core/MapEntry","^Q",656,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^2Q","^2R"]]]]]],"~$->t_cljs$spec$alpha30434",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"~:factory","~:positional","^S",["^T",["^U",["^T",[["~$keys->specnames","~$opt","~$map__30432","~$req-un","~$opt-un","^18","~$pred-exprs","~$keys-pred","~$argm","~$opt-keys","~$req-specs","~$req","~$p__30431","~$id","~$req-keys","~$opt-specs","~$k->s","~$pred-forms","~$meta30435"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30434.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30434","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^2X","^2Y","^2Z","^2[","^30","^18","^31","^32","^33","^34","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3="]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",5,"^10",false,"^2V","^2W","^O",430,"^11","^2>","^13",19,"^14",true,"^S",["^T",["^U",["^T",[["^2X","^2Y","^2Z","^2[","^30","^18","^31","^32","^33","^34","^35","^36","^37","^38","^39","^3:","^3;","^3<","^3="]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30434."],"~$pvalid?",["^ ","^L",null,"^M",["^ ","^1O",true,"^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",15,"~:top-fn",["^ ","^10",false,"~:fixed-arity",3,"^13",3,"^Y",[["^17","~$x"],["^17","~$x","^K"]],"^S",["^T",[["^17","~$x"],["^17","~$x","^K"]]],"^[",["^T",[null,null]]],"^P",8,"^O",380,"^Q",380,"^S",["^T",["^U",["^T",[["^17","~$x"],["^17","~$x","^K"]]]]],"^W","internal helper function that returns true when x is valid for spec."],"^1O",true,"^;","~$cljs.spec.alpha/pvalid?","^N","docs/cljs/spec/alpha.cljs","^R",15,"^3@",["^ ","^10",false,"^3A",3,"^13",3,"^Y",[["^17","~$x"],["^17","~$x","^K"]],"^S",["^T",[["^17","~$x"],["^17","~$x","^K"]]],"^[",["^T",[null,null]]],"^Y",[["^17","~$x"],["^17","~$x","^K"]],"^Z",null,"^3A",3,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",2,"^10",false,"^1F","~$boolean"],["^ ","^3A",3,"^10",false,"^1F","^3C"]],"^O",380,"^Q",380,"^13",3,"^14",true,"^S",["^T",[["^17","~$x"],["^17","~$x","^K"]]],"^W","internal helper function that returns true when x is valid for spec."],"~$->t_cljs$spec$alpha30596",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^2M","~$preds","^18","~$meta30597"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30596.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30596","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^2M","^3E","^18","^3F"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",3,"^10",false,"^2V","^2W","^O",816,"^11","^2F","^13",4,"^14",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^18","^3F"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30596."],"~$def-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",306,"^P",19,"^Q",306,"^R",27,"^16",true,"^S",["^T",["^U",["^T",[["~$k","^K","^V"]]]]],"^W","Do not call this directly, use 'def'"],"^;","~$cljs.spec.alpha/def-impl","^N","docs/cljs/spec/alpha.cljs","^R",27,"^Y",["^T",[["~$k","^K","^V"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",306,"^Q",306,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["~$k","^K","^V"]]]]],"^W","Do not call this directly, use 'def'"],"~$*explain-out*",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",262,"^P",16,"^Q",262,"^R",29,"^1J",true],"^;","~$cljs.spec.alpha/*explain-out*","^N","docs/cljs/spec/alpha.cljs","^R",29,"^P",1,"^1J",true,"^O",262,"^Q",262,"^1F","^12"],"~$*runtime-asserts*",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1482,"^P",3,"^Q",1482,"^R",20,"^1O",true,"^1J",true],"^1O",true,"^;","~$cljs.spec.alpha/*runtime-asserts*","^N","docs/cljs/spec/alpha.cljs","^R",20,"^P",1,"^1J",true,"^O",1480,"^Q",1482,"^1F","^12"],"~$regex-spec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1294,"^P",19,"^Q",1294,"^R",34,"^16",true,"^S",["^T",["^U",["^T",[["~$re","^18"]]]]],"^W","Do not call this directly, use 'spec' with a regex op argument"],"^;","~$cljs.spec.alpha/regex-spec-impl","^N","docs/cljs/spec/alpha.cljs","^R",34,"^Y",["^T",[["^3O","^18"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1294,"^11","^2<","^Q",1294,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^3O","^18"]]]]],"^W","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",813,"^P",19,"^Q",813,"^R",34,"^16",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^18"]]]]],"^W","Do not call this directly, use 'merge'"],"^;","~$cljs.spec.alpha/merge-spec-impl","^N","docs/cljs/spec/alpha.cljs","^R",34,"^Y",["^T",[["^2M","^3E","^18"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",813,"^11","^2F","^Q",813,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^18"]]]]],"^W","Do not call this directly, use 'merge'"],"~$explain-data*",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",219,"^P",7,"^Q",219,"^R",20,"^S",["^T",["^U",["^T",[["^V","^1W","^1X","^1Y","~$x"]]]]]],"^;","~$cljs.spec.alpha/explain-data*","^N","docs/cljs/spec/alpha.cljs","^R",20,"^Y",["^T",[["^V","^1W","^1X","^1Y","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",219,"^11",["^4",["^1Q","^1U"]],"^Q",219,"^13",5,"^14",true,"^S",["^T",["^U",["^T",[["^V","^1W","^1X","^1Y","~$x"]]]]]],"~$add-ret",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1110,"^P",8,"^Q",1110,"^R",15,"^1O",true,"^S",["^T",["^U",["^T",[["~$p","~$r","~$k"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/add-ret","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[["~$p","~$r","~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1110,"^11",["^4",[null,"^2O","^12"]],"^Q",1110,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",738,"^P",8,"^Q",738,"^R",25,"^1O",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^1W","^1X","^1Y","~$x"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/explain-pred-list","^N","docs/cljs/spec/alpha.cljs","^R",25,"^Y",["^T",[["^2M","^3E","^1W","^1X","^1Y","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",738,"^11",["^4",["^20","^12","^1U"]],"^Q",738,"^13",6,"^14",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^1W","^1X","^1Y","~$x"]]]]]],"~$MAX_INT",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",19,"^P",14,"^Q",19,"^R",21,"~:const",true],"^;","~$cljs.spec.alpha/MAX_INT","^N","docs/cljs/spec/alpha.cljs","^R",21,"~:const-expr",["^ ","~:op","^3Z","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1F","~$number"],"^P",1,"^3Z",true,"^O",19,"^Q",19,"^1F","^47"],"~$check-asserts",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1490,"^P",7,"^Q",1490,"^R",20,"^S",["^T",["^U",["^T",[["~$flag"]]]]],"^W","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^;","~$cljs.spec.alpha/check-asserts","^N","docs/cljs/spec/alpha.cljs","^R",20,"^Y",["^T",[["^49"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1490,"^Q",1490,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^49"]]]]],"^W","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1042,"^P",8,"^Q",1042,"^R",12,"^1O",true,"^S",["^T",["^U",["^T",[["~$p1","~$p2"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/alt2","^N","docs/cljs/spec/alpha.cljs","^R",12,"^Y",["^T",[["^4<","^4="]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1042,"^11",["^4",[null,"^12","^1Q","^1U"]],"^Q",1042,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^4<","^4="]]]]]],"~$and-k-gen",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",417,"^P",8,"^Q",417,"^R",17,"^1O",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^W","returns a tuple generator made up of generators for every element\n  in s."],"^1O",true,"^;","~$cljs.spec.alpha/and-k-gen","^N","docs/cljs/spec/alpha.cljs","^R",17,"^Y",["^T",[["~$s"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",417,"^11","^12","^Q",417,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^W","returns a tuple generator made up of generators for every element\n  in s."],"~$assert*",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1498,"^P",7,"^Q",1498,"^R",14,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Do not call this directly, use 'assert'."],"^;","~$cljs.spec.alpha/assert*","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["^V","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1498,"^Q",1498,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",123,"^P",8,"^Q",123,"^R",14,"^1O",true,"^S",["^T",["^U",["^T",[["~$f-n"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/fn-sym","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["^4D"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",123,"^11",["^4",["^12","^2I","^1U"]],"^Q",123,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^4D"]]]]]],"~$inst-in-range?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1445,"^P",7,"^Q",1445,"^R",21,"^S",["^T",["^U",["^T",[["~$start","~$end","~$inst"]]]]],"^W","Return true if inst at or after start and before end"],"^;","~$cljs.spec.alpha/inst-in-range?","^N","docs/cljs/spec/alpha.cljs","^R",21,"^Y",["^T",[["^4G","^4H","^4I"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1445,"^11","^3C","^Q",1445,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^4G","^4H","^4I"]]]]],"^W","Return true if inst at or after start and before end"],"~$t_cljs$spec$alpha30501",["^ ","^1<",9,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2A","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",6,"^O",556,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$registry-ref",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",47,"^P",20,"^Q",47,"^R",32,"^1O",true],"^1O",true,"^;","~$cljs.spec.alpha/registry-ref","^N","docs/cljs/spec/alpha.cljs","^R",32,"^P",1,"^O",47,"^Q",47,"^1F","~$cljs.core/Atom"],"~$accept?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",979,"^P",8,"^Q",979,"^R",15,"^1O",true,"^S",["^T",["^U",["^T",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/accept?","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[["~$p__30657"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",979,"^11","^3C","^Q",979,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[[["^ ","^4P",["^4Q"]]]]]]]],"~$and-spec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",749,"^P",19,"^Q",749,"^R",32,"^16",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^18"]]]]],"^W","Do not call this directly, use 'and'"],"^;","~$cljs.spec.alpha/and-spec-impl","^N","docs/cljs/spec/alpha.cljs","^R",32,"^Y",["^T",[["^2M","^3E","^18"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",749,"^11","^2@","^Q",749,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^18"]]]]],"^W","Do not call this directly, use 'and'"],"~$accept",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",977,"^P",8,"^Q",977,"^R",14,"^1O",true,"^S",["^T",["^U",["^T",[["~$x"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/accept","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",977,"^11","^1Q","^Q",977,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$x"]]]]]],"~$recur-limit?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",351,"^P",8,"^Q",351,"^R",20,"^1O",true,"^S",["^T",["^U",["^T",[["~$rmap","^38","^1W","~$k"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/recur-limit?","^N","docs/cljs/spec/alpha.cljs","^R",20,"^Y",["^T",[["^4Y","^38","^1W","~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",351,"^11","^3C","^Q",351,"^13",4,"^14",true,"^S",["^T",["^U",["^T",[["^4Y","^38","^1W","~$k"]]]]]],"~$describe*",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",45,"^P",4,"^Q",45,"^R",13,"~:protocol","^1>","^W",null,"^S",["^T",["^U",["^T",[["^V"]]]]]],"^50","^1>","^;","~$cljs.spec.alpha/describe*","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",39,"^11","^12","^Q",45,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W",null],"~$map-spec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",423,"^P",19,"^Q",423,"^R",32,"^16",true,"^S",["^T",["^U",["^T",[[["^ ","^4P",["^2[","^30","^32","^31","^34","^35","^36","^39","^3:","^3<","^2Y","^18"],"~:as","^33"]]]]]],"^W","Do not call this directly, use 'spec' with a map argument"],"^;","~$cljs.spec.alpha/map-spec-impl","^N","docs/cljs/spec/alpha.cljs","^R",32,"^Y",["^T",[["^37"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",423,"^11","^2>","^Q",423,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[[["^ ","^4P",["^2[","^30","^32","^31","^34","^35","^36","^39","^3:","^3<","^2Y","^18"],"^53","^33"]]]]]],"^W","Do not call this directly, use 'spec' with a map argument"],"~$->t_cljs$spec$alpha30515",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^2M","^3E","^18","~$specs","~$cnt","~$meta30516"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30515.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30515","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^2M","^3E","^18","^56","^57","^58"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",6,"^10",false,"^2V","^2W","^O",600,"^11","^2;","^13",6,"^14",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^18","^56","^57","^58"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30515."],"~$reg-resolve!",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",66,"^P",8,"^Q",66,"^R",20,"^1O",true,"^S",["^T",["^U",["^T",[["~$k"]]]]],"^W","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1O",true,"^;","~$cljs.spec.alpha/reg-resolve!","^N","docs/cljs/spec/alpha.cljs","^R",20,"^Y",["^T",[["~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",66,"^11",["^4",[null,"^12"]],"^Q",66,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$k"]]]]],"^W","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$re-explain",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1268,"^P",8,"^Q",1268,"^R",18,"^1O",true,"^S",["^T",["^U",["^T",[["^1W","^1X","^1Y","^3O","^1Z"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/re-explain","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["^1W","^1X","^1Y","^3O","^1Z"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1268,"^11",["^4",["^20","^12","^1U"]],"^Q",1268,"^13",5,"^14",true,"^S",["^T",["^U",["^T",[["^1W","^1X","^1Y","^3O","^1Z"]]]]]],"~$alts",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1041,"^P",8,"^Q",1041,"^R",12,"^1O",true,"^S",["^T",["^U",["^T",[["~$&","^2L"]]]]],"^3@",["^ ","^10",true,"^3A",0,"^13",0,"^Y",[["^T",["^2L"]]],"^S",["^T",[["~$&","^2L"]]],"^[",["^T",[null]]]],"^1O",true,"^;","~$cljs.spec.alpha/alts","^N","docs/cljs/spec/alpha.cljs","^R",12,"^3@",["^ ","^10",true,"^3A",0,"^13",0,"^Y",[["^T",["^2L"]]],"^S",["^T",[["~$&","^2L"]]],"^[",["^T",[null]]],"^Y",[["^T",["^2L"]]],"^Z",null,"^3A",0,"^[",["^T",[null]],"^P",1,"^10",true,"^24",[["^ ","^3A",0,"^10",true,"^1F",["^4",["^12","^1Q","^1U"]]]],"^O",1041,"^11","^12","^Q",1041,"^13",0,"^14",true,"^S",["^T",[["~$&","^2L"]]]],"~$with-name",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",85,"^P",8,"^Q",85,"^R",17,"^1O",true,"^S",["^T",["^U",["^T",[["^V","~$name"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/with-name","^N","docs/cljs/spec/alpha.cljs","^R",17,"^Y",["^T",[["^V","^5A"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",85,"^11",["^4",["^2O","^12","^2?","^2I","~$cljs.core/MetaFn","^1U"]],"^Q",85,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","^5A"]]]]]],"~$explain",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",270,"^P",7,"^Q",270,"^R",14,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^;","~$cljs.spec.alpha/explain","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["^V","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",270,"^11","^12","^Q",270,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",93,"^P",8,"^Q",93,"^R",17,"^1O",true,"^S",["^T",["^U",["^T",[["^V"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/spec-name","^N","docs/cljs/spec/alpha.cljs","^R",17,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",93,"^11",["^4",["^12","^2?","^2I","^1U"]],"^Q",93,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]]],"~$map-spec",["^ ","^;","~$cljs.spec.alpha/map-spec","^N","docs/cljs/spec/alpha.cljs","^O",335,"^P",1,"^Q",335,"^R",18,"~:declared",true,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",335,"^P",10,"^Q",335,"^R",18,"^5J",true]],"~$t_cljs$spec$alpha30608",["^ ","^1<",25,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2=","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",6,"^O",881,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$with-gen*",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",44,"^P",4,"^Q",44,"^R",13,"^50","^1>","^W",null,"^S",["^T",["^U",["^T",[["^V","^18"]]]]]],"^50","^1>","^;","~$cljs.spec.alpha/with-gen*","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["^V","^18"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",39,"^11","^12","^Q",44,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","^18"]]]]],"^W",null],"~$t_cljs$spec$alpha30782",["^ ","^1<",3,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2<","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",3,"^O",1297,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$->t_cljs$spec$alpha30782",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^3O","^18","~$meta30783"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30782.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30782","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^3O","^18","^5P"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",3,"^10",false,"^2V","^2W","^O",1297,"^11","^2<","^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^3O","^18","^5P"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30782."],"~$k-gen",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",397,"^P",8,"^Q",397,"^R",13,"^1O",true,"^S",["^T",["^U",["^T",[["~$f"]]]]],"^W","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1O",true,"^;","~$cljs.spec.alpha/k-gen","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["~$f"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",397,"^11",["^4",["^12","^1U"]],"^Q",397,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$f"]]]]],"^W","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",659,"^P",19,"^Q",659,"^R",31,"^16",true,"^S",["^T",["^U",["^T",[["^8","^2M","^3E","^18"]]]]],"^W","Do not call this directly, use 'or'"],"^;","~$cljs.spec.alpha/or-spec-impl","^N","docs/cljs/spec/alpha.cljs","^R",31,"^Y",["^T",[["^8","^2M","^3E","^18"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",659,"^11","^1B","^Q",659,"^13",4,"^14",true,"^S",["^T",["^U",["^T",[["^8","^2M","^3E","^18"]]]]],"^W","Do not call this directly, use 'or'"],"~$t_cljs$spec$alpha30434",["^ ","^1<",19,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2>","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",5,"^O",430,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$specize",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",159,"^P",8,"^Q",159,"^R",15,"^1O",true,"^S",["^T",["^U",["^T",[["~$s"],["~$s","^K"]]]]],"^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["~$s"],["~$s","^K"]],"^S",["^T",[["~$s"],["~$s","^K"]]],"^[",["^T",[null,null]]]],"^1O",true,"^;","~$cljs.spec.alpha/specize","^N","docs/cljs/spec/alpha.cljs","^R",15,"^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["~$s"],["~$s","^K"]],"^S",["^T",[["~$s"],["~$s","^K"]]],"^[",["^T",[null,null]]],"^Y",[["~$s"],["~$s","^K"]],"^Z",null,"^3A",2,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",1,"^10",false,"^1F",["^4",["^1>","^12"]]],["^ ","^3A",2,"^10",false,"^1F",["^4",["^1>","^12"]]]],"^O",159,"^Q",159,"^13",2,"^14",true,"^S",["^T",[["~$s"],["~$s","^K"]]]],"~$*fspec-iterations*",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",27,"^P",16,"^Q",27,"^R",34,"^1J",true],"^;","~$cljs.spec.alpha/*fspec-iterations*","^N","docs/cljs/spec/alpha.cljs","^R",34,"^P",1,"^1J",true,"^O",27,"^Q",27,"^1F","^12","^W","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$t_cljs$spec$alpha30789",["^ ","^1<",9,"^1=",["^4",["^1>","^1?","^1@","^1A","~$cljs.core/ILookup"]],"^;","^2C","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",5,"^O",1346,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A","^60"]]],"~$Spec",["^ ","^M",["^ ","^22",true,"^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",18,"^P",14,"^O",39,"^23",["^ ","^24",["^ ","~$conform*",[["^V","~$x"]],"~$unform*",[["^V","~$y"]],"~$explain*",[["^V","^1W","^1X","^1Y","~$x"]],"~$gen*",[["^V","~$overrides","^1W","^4Y"]],"^5L",[["^V","^18"]],"^4[",[["^V"]]]],"^Q",39,"^26",["^ ","~:conform*",["^ ","^;","^62","^S",["^T",[["^V","~$x"]]],"^W",null],"~:unform*",["^ ","^;","^63","^S",["^T",[["^V","~$y"]]],"^W",null],"~:explain*",["^ ","^;","^64","^S",["^T",[["^V","^1W","^1X","^1Y","~$x"]]],"^W",null],"~:gen*",["^ ","^;","^65","^S",["^T",[["^V","^66","^1W","^4Y"]]],"^W",null],"~:with-gen*",["^ ","^;","^5L","^S",["^T",[["^V","^18"]]],"^W",null],"~:describe*",["^ ","^;","^4[","^S",["^T",[["^V"]]],"^W",null]],"^28",["^T",["@interface"]]],"^22",true,"^;","^1>","^N","docs/cljs/spec/alpha.cljs","^R",18,"^P",1,"^O",39,"^23",["^ ","^24",["^ ","^62",[["^V","~$x"]],"^63",[["^V","~$y"]],"^64",[["^V","^1W","^1X","^1Y","~$x"]],"^65",[["^V","^66","^1W","^4Y"]],"^5L",[["^V","^18"]],"^4[",[["^V"]]]],"^29",null,"^Q",39,"^1F","^12","^26",["^ ","^67",["^ ","^;","^62","^S",["^T",[["^V","~$x"]]],"^W",null],"^68",["^ ","^;","^63","^S",["^T",[["^V","~$y"]]],"^W",null],"^69",["^ ","^;","^64","^S",["^T",[["^V","^1W","^1X","^1Y","~$x"]]],"^W",null],"^6:",["^ ","^;","^65","^S",["^T",[["^V","^66","^1W","^4Y"]]],"^W",null],"^6;",["^ ","^;","^5L","^S",["^T",[["^V","^18"]]],"^W",null],"^6<",["^ ","^;","^4[","^S",["^T",[["^V"]]],"^W",null]],"^2:",["^4",["^2;","^2<","^2=","^2>","^2@","^2A","^2C","^2E","^2F","^2G","^1B","^1:"]],"^28",["^T",["@interface"]]],"~$unform",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",174,"^P",7,"^Q",174,"^R",13,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^;","~$cljs.spec.alpha/unform","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["^V","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",174,"^11","^12","^Q",174,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",371,"^P",7,"^Q",371,"^R",13,"^S",["^T",["^U",["^T",[["^V","~$x"],["^V","~$x","^K"]]]]],"^W","Helper function that returns true when x is valid for spec.","^3@",["^ ","^10",false,"^3A",3,"^13",3,"^Y",[["^V","~$x"],["^V","~$x","^K"]],"^S",["^T",[["^V","~$x"],["^V","~$x","^K"]]],"^[",["^T",[null,null]]]],"^;","~$cljs.spec.alpha/valid?","^N","docs/cljs/spec/alpha.cljs","^R",13,"^3@",["^ ","^10",false,"^3A",3,"^13",3,"^Y",[["^V","~$x"],["^V","~$x","^K"]],"^S",["^T",[["^V","~$x"],["^V","~$x","^K"]]],"^[",["^T",[null,null]]],"^Y",[["^V","~$x"],["^V","~$x","^K"]],"^Z",null,"^3A",3,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",2,"^10",false,"^1F","^3C"],["^ ","^3A",3,"^10",false,"^1F","^3C"]],"^O",371,"^Q",371,"^13",3,"^14",true,"^S",["^T",[["^V","~$x"],["^V","~$x","^K"]]],"^W","Helper function that returns true when x is valid for spec."],"~$t_cljs$spec$alpha30596",["^ ","^1<",4,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2F","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",3,"^O",816,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"^D",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",293,"^P",7,"^Q",293,"^R",10,"^S",["^T",["^U",["^T",[["^V"],["^V","^66"]]]]],"^W","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["^V"],["^V","^66"]],"^S",["^T",[["^V"],["^V","^66"]]],"^[",["^T",[null,null]]]],"^;","~$cljs.spec.alpha/gen","^N","docs/cljs/spec/alpha.cljs","^R",10,"^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["^V"],["^V","^66"]],"^S",["^T",[["^V"],["^V","^66"]]],"^[",["^T",[null,null]]],"^Y",[["^V"],["^V","^66"]],"^Z",null,"^3A",2,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",1,"^10",false,"^1F","^12"],["^ ","^3A",2,"^10",false,"^1F","^12"]],"^O",293,"^Q",293,"^13",2,"^14",true,"^S",["^T",[["^V"],["^V","^66"]]],"^W","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$nonconforming",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1389,"^P",7,"^Q",1389,"^R",20,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^;","~$cljs.spec.alpha/nonconforming","^N","docs/cljs/spec/alpha.cljs","^R",20,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1389,"^11","^2G","^Q",1389,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"~$t_cljs$spec$alpha30490",["^ ","^1<",6,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2E","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",6,"^O",520,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"^63",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",41,"^P",4,"^Q",41,"^R",11,"^50","^1>","^W",null,"^S",["^T",["^U",["^T",[["^V","~$y"]]]]]],"^50","^1>","^;","~$cljs.spec.alpha/unform*","^N","docs/cljs/spec/alpha.cljs","^R",11,"^Y",["^T",[["^V","~$y"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",39,"^11","^12","^Q",41,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$y"]]]]],"^W",null],"~$->sym",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",323,"^P",8,"^Q",323,"^R",13,"^1O",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Returns a symbol from a symbol or var"],"^1O",true,"^;","~$cljs.spec.alpha/->sym","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",323,"^11",["^4",[null,"^12"]],"^Q",323,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",187,"^P",7,"^Q",187,"^R",13,"^S",["^T",["^U",["^T",[["^K"]]]]]],"^;","~$cljs.spec.alpha/abbrev","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["^K"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",187,"^11",["^4",[null,"^12","^2I"]],"^Q",187,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^K"]]]]]],"~$regex?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",80,"^P",7,"^Q",80,"^R",13,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^;","~$cljs.spec.alpha/regex?","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",80,"^11",["^4",[null,"^12"]],"^Q",80,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$t_cljs$spec$alpha30582",["^ ","^1<",6,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2@","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",5,"^O",780,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$->t_cljs$spec$alpha30608",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^K","~$max-count","~$p__30605","~$check?","^18","~$gen-max","^17","~$cpred","~$map__30606","~$conform-keys","~$kind-form","~$addcv","~$cfns","~$describe-form","~$distinct","^V","~$kfn","~$gen-into","~$count","~$min-count","~$opts","~$kind","~$conform-all","~$conform-into","~$meta30609"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30608.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30608","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^K","^6O","^6P","^6Q","^18","^6R","^17","^6S","^6T","^6U","^6V","^6W","^6X","^6Y","^6Z","^V","^6[","^70","^71","^72","^73","^74","^75","^76","^77"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",6,"^10",false,"^2V","^2W","^O",881,"^11","^2=","^13",25,"^14",true,"^S",["^T",["^U",["^T",[["^K","^6O","^6P","^6Q","^18","^6R","^17","^6S","^6T","^6U","^6V","^6W","^6X","^6Y","^6Z","^V","^6[","^70","^71","^72","^73","^74","^75","^76","^77"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30608."],"~$or-k-gen",["^ ","^L",null,"^M",["^ ","^1O",true,"^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",16,"^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["~$s"],["^72","~$s"]],"^S",["^T",[["~$s"],["^72","~$s"]]],"^[",["^T",[null,null]]],"^P",8,"^O",406,"^Q",406,"^S",["^T",["^U",["^T",[["~$s"],["^72","~$s"]]]]],"^W","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"^1O",true,"^;","~$cljs.spec.alpha/or-k-gen","^N","docs/cljs/spec/alpha.cljs","^R",16,"^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["~$s"],["^72","~$s"]],"^S",["^T",[["~$s"],["^72","~$s"]]],"^[",["^T",[null,null]]],"^Y",[["~$s"],["^72","~$s"]],"^Z",null,"^3A",2,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",1,"^10",false,"^1F","^12"],["^ ","^3A",2,"^10",false,"^1F","^12"]],"^O",406,"^Q",406,"^13",2,"^14",true,"^S",["^T",[["~$s"],["^72","~$s"]]],"^W","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$->t_cljs$spec$alpha30789",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A","^60"]],"^1H",["^4",["^1?","^1A","^60"]],"^2V","^2W","^S",["^T",["^U",["^T",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^18","^56","~$meta30790"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30789.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A","^60"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30789","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^7<","^7=","^7>","^7?","^7@","^7A","^18","^56","^7B"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",5,"^10",false,"^2V","^2W","^O",1346,"^11","^2C","^13",9,"^14",true,"^S",["^T",["^U",["^T",[["^7<","^7=","^7>","^7?","^7@","^7A","^18","^56","^7B"]]]]],"^1H",["^4",["^1?","^1A","^60"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30789."],"~$int-in-range?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1452,"^P",7,"^Q",1452,"^R",20,"^S",["^T",["^U",["^T",[["^4G","^4H","~$val"]]]]],"^W","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^;","~$cljs.spec.alpha/int-in-range?","^N","docs/cljs/spec/alpha.cljs","^R",20,"^Y",["^T",[["^4G","^4H","^7E"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1452,"^11",["^4",["^3C","^12"]],"^Q",1452,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^4G","^4H","^7E"]]]]],"^W","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$dt",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",358,"^P",8,"^Q",358,"^R",10,"^1O",true,"^S",["^T",["^U",["^T",[["^17","~$x","^K"],["^17","~$x","^K","~$cpred?"]]]]],"^3@",["^ ","^10",false,"^3A",4,"^13",4,"^Y",[["^17","~$x","^K"],["^17","~$x","^K","^7H"]],"^S",["^T",[["^17","~$x","^K"],["^17","~$x","^K","^7H"]]],"^[",["^T",[null,null]]]],"^1O",true,"^;","~$cljs.spec.alpha/dt","^N","docs/cljs/spec/alpha.cljs","^R",10,"^3@",["^ ","^10",false,"^3A",4,"^13",4,"^Y",[["^17","~$x","^K"],["^17","~$x","^K","^7H"]],"^S",["^T",[["^17","~$x","^K"],["^17","~$x","^K","^7H"]]],"^[",["^T",[null,null]]],"^Y",[["^17","~$x","^K"],["^17","~$x","^K","^7H"]],"^Z",null,"^3A",4,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",3,"^10",false,"^1F","^12"],["^ ","^3A",4,"^10",false,"^1F",["^4",[null,"^12","^2?"]]]],"^O",358,"^Q",358,"^13",4,"^14",true,"^S",["^T",[["^17","~$x","^K"],["^17","~$x","^K","^7H"]]]],"~$preturn",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1074,"^P",8,"^Q",1074,"^R",15,"^1O",true,"^S",["^T",["^U",["^T",[["~$p"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/preturn","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[["~$p"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1074,"^11",["^4",[null,"^12","^2?","^2T","^1U"]],"^Q",1074,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$p"]]]]]],"~$re-conform",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1255,"^P",8,"^Q",1255,"^R",18,"^1O",true,"^S",["^T",["^U",["^T",[["~$p",["~$x","~$&","~$xs","^53","~$data"]]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/re-conform","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["~$p","~$p__30763"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1255,"^11",["^4",[null,"^12","^2?","^2T","^1U"]],"^Q",1255,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$p",["~$x","~$&","^7M","^53","^7N"]]]]]]],"~$spec?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",74,"^P",7,"^Q",74,"^R",12,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","returns x if x is a spec object, else logical false"],"^;","~$cljs.spec.alpha/spec?","^N","docs/cljs/spec/alpha.cljs","^R",12,"^Y",["^T",[["~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",74,"^11",["^4",["^1>","^1U"]],"^Q",74,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",318,"^P",7,"^Q",318,"^R",15,"^S",["^T",["^U",["^T",[[]]]]],"^W","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^;","~$cljs.spec.alpha/registry","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",318,"^11","^12","^Q",318,"^13",0,"^14",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1010,"^P",19,"^Q",1010,"^R",27,"^16",true,"^S",["^T",["^U",["^T",[["^K","~$p"]]]]],"^W","Do not call this directly, use '+'"],"^;","~$cljs.spec.alpha/rep+impl","^N","docs/cljs/spec/alpha.cljs","^R",27,"^Y",["^T",[["^K","~$p"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1010,"^11",["^4",["^12","^1Q","^1U"]],"^Q",1010,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^K","~$p"]]]]],"^W","Do not call this directly, use '+'"],"~$deriv",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1123,"^P",8,"^Q",1123,"^R",13,"^1O",true,"^S",["^T",["^U",["^T",[["~$p","~$x"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/deriv","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["~$p","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1123,"^11",["^4",[null,"^12","^1Q","^1U"]],"^Q",1123,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$p","~$x"]]]]]],"~$deep-resolve",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",49,"^P",8,"^Q",49,"^R",20,"^1O",true,"^S",["^T",["^U",["^T",[["~$reg","~$k"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/deep-resolve","^N","docs/cljs/spec/alpha.cljs","^R",20,"^Y",["^T",[["^7Z","~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",49,"^Q",49,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^7Z","~$k"]]]]]],"~$exercise",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1436,"^P",7,"^Q",1436,"^R",15,"^S",["^T",["^U",["^T",[["^V"],["^V","~$n"],["^V","~$n","^66"]]]]],"^W","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^3@",["^ ","^10",false,"^3A",3,"^13",3,"^Y",[["^V"],["^V","~$n"],["^V","~$n","^66"]],"^S",["^T",[["^V"],["^V","~$n"],["^V","~$n","^66"]]],"^[",["^T",[null,null,null]]]],"^;","~$cljs.spec.alpha/exercise","^N","docs/cljs/spec/alpha.cljs","^R",15,"^3@",["^ ","^10",false,"^3A",3,"^13",3,"^Y",[["^V"],["^V","~$n"],["^V","~$n","^66"]],"^S",["^T",[["^V"],["^V","~$n"],["^V","~$n","^66"]]],"^[",["^T",[null,null,null]]],"^Y",[["^V"],["^V","~$n"],["^V","~$n","^66"]],"^Z",null,"^3A",3,"^[",["^T",[null,null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",1,"^10",false,"^1F","^12"],["^ ","^3A",2,"^10",false,"^1F","^12"],["^ ","^3A",3,"^10",false,"^1F","~$cljs.core/LazySeq"]],"^O",1436,"^Q",1436,"^13",3,"^14",true,"^S",["^T",[["^V"],["^V","~$n"],["^V","~$n","^66"]]],"^W","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$explain-data",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",226,"^P",7,"^Q",226,"^R",19,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^;","~$cljs.spec.alpha/explain-data","^N","docs/cljs/spec/alpha.cljs","^R",19,"^Y",["^T",[["^V","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",226,"^11",["^4",["^1Q","^1U"]],"^Q",226,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",29,"^3@",["^ ","^10",false,"^3A",3,"^13",3,"^Y",[["^2M","^3E"],["^2M","^3E","^18"]],"^S",["^T",[["^2M","^3E"],["^2M","^3E","^18"]]],"^[",["^T",[null,null]]],"^16",true,"^P",19,"^O",594,"^Q",594,"^S",["^T",["^U",["^T",[["^2M","^3E"],["^2M","^3E","^18"]]]]],"^W","Do not call this directly, use 'tuple'"],"^;","~$cljs.spec.alpha/tuple-impl","^N","docs/cljs/spec/alpha.cljs","^R",29,"^3@",["^ ","^10",false,"^3A",3,"^13",3,"^Y",[["^2M","^3E"],["^2M","^3E","^18"]],"^S",["^T",[["^2M","^3E"],["^2M","^3E","^18"]]],"^[",["^T",[null,null]]],"^Y",[["^2M","^3E"],["^2M","^3E","^18"]],"^Z",null,"^3A",3,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",2,"^10",false,"^1F","^12"],["^ ","^3A",3,"^10",false,"^1F","^2;"]],"^O",594,"^Q",594,"^13",3,"^14",true,"^S",["^T",[["^2M","^3E"],["^2M","^3E","^18"]]],"^W","Do not call this directly, use 'tuple'"],"~$->t_cljs$spec$alpha30524",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^8","^2M","^3E","^18","^38","~$kps","^56","~$cform","~$meta30525"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30524.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30524","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^8","^2M","^3E","^18","^38","^88","^56","^89","^8:"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",5,"^10",false,"^2V","^2W","^O",697,"^11","^1B","^13",9,"^14",true,"^S",["^T",["^U",["^T",[["^8","^2M","^3E","^18","^38","^88","^56","^89","^8:"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30524."],"~$multi-spec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",34,"^3@",["^ ","^10",false,"^3A",4,"^13",4,"^Y",[["^K","~$mmvar","~$retag"],["^K","^8=","^8>","^18"]],"^S",["^T",[["^K","^8=","^8>"],["^K","^8=","^8>","^18"]]],"^[",["^T",[null,null]]],"^16",true,"^P",19,"^O",544,"^Q",544,"^S",["^T",["^U",["^T",[["^K","^8=","^8>"],["^K","^8=","^8>","^18"]]]]],"^W","Do not call this directly, use 'multi-spec'"],"^;","~$cljs.spec.alpha/multi-spec-impl","^N","docs/cljs/spec/alpha.cljs","^R",34,"^3@",["^ ","^10",false,"^3A",4,"^13",4,"^Y",[["^K","^8=","^8>"],["^K","^8=","^8>","^18"]],"^S",["^T",[["^K","^8=","^8>"],["^K","^8=","^8>","^18"]]],"^[",["^T",[null,null]]],"^Y",[["^K","^8=","^8>"],["^K","^8=","^8>","^18"]],"^Z",null,"^3A",4,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",3,"^10",false,"^1F","^12"],["^ ","^3A",4,"^10",false,"^1F","^2A"]],"^O",544,"^Q",544,"^13",4,"^14",true,"^S",["^T",[["^K","^8=","^8>"],["^K","^8=","^8>","^18"]]],"^W","Do not call this directly, use 'multi-spec'"],"~$t_cljs$spec$alpha30814",["^ ","^1<",2,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2G","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",5,"^O",1394,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$conform",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",168,"^P",7,"^Q",168,"^R",14,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^;","~$cljs.spec.alpha/conform","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["^V","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",168,"^11","^12","^Q",168,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^65",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",43,"^P",4,"^Q",43,"^R",8,"^50","^1>","^W",null,"^S",["^T",["^U",["^T",[["^V","^66","^1W","^4Y"]]]]]],"^50","^1>","^;","~$cljs.spec.alpha/gen*","^N","docs/cljs/spec/alpha.cljs","^R",8,"^Y",["^T",[["^V","^66","^1W","^4Y"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",39,"^11","^12","^Q",43,"^13",4,"^14",true,"^S",["^T",["^U",["^T",[["^V","^66","^1W","^4Y"]]]]],"^W",null],"~$fspec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1342,"^P",19,"^Q",1342,"^R",29,"^16",true,"^S",["^T",["^U",["^T",[["^7<","^7=","^7>","^7?","^7@","^7A","^18"]]]]],"^W","Do not call this directly, use 'fspec'"],"^;","~$cljs.spec.alpha/fspec-impl","^N","docs/cljs/spec/alpha.cljs","^R",29,"^Y",["^T",[["^7<","^7=","^7>","^7?","^7@","^7A","^18"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1342,"^11","^2C","^Q",1342,"^13",7,"^14",true,"^S",["^T",["^U",["^T",[["^7<","^7=","^7>","^7?","^7@","^7A","^18"]]]]],"^W","Do not call this directly, use 'fspec'"],"~$->t_cljs$spec$alpha30490",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^K","^17","^18","^7H","~$unc","~$meta30491"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30490.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30490","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^K","^17","^18","^7H","^8G","^8H"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",6,"^10",false,"^2V","^2W","^O",520,"^11","^2E","^13",6,"^14",true,"^S",["^T",["^U",["^T",[["^K","^17","^18","^7H","^8G","^8H"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30490."],"~$inck",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",355,"^P",8,"^Q",355,"^R",12,"^1O",true,"^S",["^T",["^U",["^T",[["~$m","~$k"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/inck","^N","docs/cljs/spec/alpha.cljs","^R",12,"^Y",["^T",[["~$m","~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",355,"^11",["^4",["^2O","^12"]],"^Q",355,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$m","~$k"]]]]]],"~$*coll-check-limit*",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",31,"^P",16,"^Q",31,"^R",34,"^1J",true],"^;","~$cljs.spec.alpha/*coll-check-limit*","^N","docs/cljs/spec/alpha.cljs","^R",34,"^P",1,"^1J",true,"^O",31,"^Q",31,"^1F","^12","^W","The number of items validated in a collection spec'ed with 'every'"],"~$get-spec",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",330,"^P",7,"^Q",330,"^R",15,"^S",["^T",["^U",["^T",[["~$k"]]]]],"^W","Returns spec registered for keyword/symbol/var k, or nil."],"^;","~$cljs.spec.alpha/get-spec","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[["~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",330,"^11",["^4",["^12","^1U"]],"^Q",330,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$k"]]]]],"^W","Returns spec registered for keyword/symbol/var k, or nil."],"~$t_cljs$spec$alpha30817",["^ ","^1<",5,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^1:","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",5,"^O",1414,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$gensub",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",282,"^P",8,"^Q",282,"^R",14,"^1O",true,"^S",["^T",["^U",["^T",[["^V","^66","^1W","^4Y","^K"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/gensub","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["^V","^66","^1W","^4Y","^K"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",282,"^11","^12","^Q",282,"^13",5,"^14",true,"^S",["^T",["^U",["^T",[["^V","^66","^1W","^4Y","^K"]]]]]],"~$the-spec",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",116,"^P",8,"^Q",116,"^R",16,"^1O",true,"^S",["^T",["^U",["^T",[["~$spec-or-k"]]]]],"^W","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1O",true,"^;","~$cljs.spec.alpha/the-spec","^N","docs/cljs/spec/alpha.cljs","^R",16,"^Y",["^T",[["^8T"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",116,"^11",["^4",["^12","^1U"]],"^Q",116,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^8T"]]]]],"^W","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",793,"^P",8,"^Q",793,"^R",17,"^1O",true,"^S",["^T",["^U",["^T",[["~$x","^6[","~$kform","^6Z","^71","^72","^6O","^1W","^1X","^1Y"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/coll-prob","^N","docs/cljs/spec/alpha.cljs","^R",17,"^Y",["^T",[["~$x","^6[","^8W","^6Z","^71","^72","^6O","^1W","^1X","^1Y"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",793,"^11",["^4",["^20","^12","^1U"]],"^Q",793,"^13",10,"^14",true,"^S",["^T",["^U",["^T",[["~$x","^6[","^8W","^6Z","^71","^72","^6O","^1W","^1X","^1Y"]]]]]],"~$every-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",29,"^3@",["^ ","^10",false,"^3A",4,"^13",4,"^Y",[["^K","^17","^73"],["^K","^17",["^ ","^76","~:into","^6Y","~:cljs.spec.alpha/describe","^4P",["^74","~:cljs.spec.alpha/kind-form","^71","^6O","^72","^6Z","^6R","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","^6U","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^6R",20],"^53","^73"],"^18"]],"^S",["^T",[["^K","^17","^73"],["^K","^17",["^ ","^76","^8Z","^6Y","^8[","^4P",["^74","^90","^71","^6O","^72","^6Z","^6R","^91","^92","^6U","^93"],"^94",["^ ","^6R",20],"^53","^73"],"^18"]]],"^[",["^T",[null,null]]],"^16",true,"^P",19,"^O",843,"^Q",843,"^S",["^T",["^U",["^T",[["^K","^17","^73"],["^K","^17",["^ ","^76","^8Z","^6Y","^8[","^4P",["^74","^90","^71","^6O","^72","^6Z","^6R","^91","^92","^6U","^93"],"^94",["^ ","^6R",20],"^53","^73"],"^18"]]]]],"^W","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"^;","~$cljs.spec.alpha/every-impl","^N","docs/cljs/spec/alpha.cljs","^R",29,"^3@",["^ ","^10",false,"^3A",4,"^13",4,"^Y",[["^K","^17","^73"],["^K","^17",["^ ","^76","^8Z","^6Y","^8[","^4P",["^74","^90","^71","^6O","^72","^6Z","^6R","^91","^92","^6U","^93"],"^94",["^ ","^6R",20],"^53","^73"],"^18"]],"^S",["^T",[["^K","^17","^73"],["^K","^17",["^ ","^76","^8Z","^6Y","^8[","^4P",["^74","^90","^71","^6O","^72","^6Z","^6R","^91","^92","^6U","^93"],"^94",["^ ","^6R",20],"^53","^73"],"^18"]]],"^[",["^T",[null,null]]],"^Y",[["^K","^17","^73"],["^K","^17",["^ ","^76","^8Z","^6Y","^8[","^4P",["^74","^90","^71","^6O","^72","^6Z","^6R","^91","^92","^6U","^93"],"^94",["^ ","^6R",20],"^53","^73"],"^18"]],"^Z",null,"^3A",4,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",3,"^10",false,"^1F","^12"],["^ ","^3A",4,"^10",false,"^1F","^2="]],"^O",843,"^Q",843,"^13",4,"^14",true,"^S",["^T",[["^K","^17","^73"],["^K","^17",["^ ","^76","^8Z","^6Y","^8[","^4P",["^74","^90","^71","^6O","^72","^6Z","^6R","^91","^92","^6U","^93"],"^94",["^ ","^6R",20],"^53","^73"],"^18"]]],"^W","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$accept-nil?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1060,"^P",8,"^Q",1060,"^R",19,"^1O",true,"^S",["^T",["^U",["^T",[["~$p"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/accept-nil?","^N","docs/cljs/spec/alpha.cljs","^R",19,"^Y",["^T",[["~$p"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1060,"^11",["^4",["^3C","^12","^1U"]],"^Q",1060,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$p"]]]]]],"~$maybe-spec",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",105,"^P",8,"^Q",105,"^R",18,"^1O",true,"^S",["^T",["^U",["^T",[["^8T"]]]]],"^W","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1O",true,"^;","~$cljs.spec.alpha/maybe-spec","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["^8T"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",105,"^11",["^4",[null,"^2O","^1>","^12","^2?","^2I","^5C","^1U"]],"^Q",105,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^8T"]]]]],"^W","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$spec-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",28,"^3@",["^ ","^10",false,"^3A",5,"^13",5,"^Y",[["^K","^17","^18","^7H"],["^K","^17","^18","^7H","^8G"]],"^S",["^T",[["^K","^17","^18","^7H"],["^K","^17","^18","^7H","^8G"]]],"^[",["^T",[null,null]]],"^16",true,"^P",19,"^O",511,"^Q",511,"^S",["^T",["^U",["^T",[["^K","^17","^18","^7H"],["^K","^17","^18","^7H","^8G"]]]]],"^W","Do not call this directly, use 'spec'"],"^;","~$cljs.spec.alpha/spec-impl","^N","docs/cljs/spec/alpha.cljs","^R",28,"^3@",["^ ","^10",false,"^3A",5,"^13",5,"^Y",[["^K","^17","^18","^7H"],["^K","^17","^18","^7H","^8G"]],"^S",["^T",[["^K","^17","^18","^7H"],["^K","^17","^18","^7H","^8G"]]],"^[",["^T",[null,null]]],"^Y",[["^K","^17","^18","^7H"],["^K","^17","^18","^7H","^8G"]],"^Z",null,"^3A",5,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",4,"^10",false,"^1F","^12"],["^ ","^3A",5,"^10",false,"^1F",["^4",[null,"^2O","^12","^2E","^1U"]]]],"^O",511,"^Q",511,"^13",5,"^14",true,"^S",["^T",[["^K","^17","^18","^7H"],["^K","^17","^18","^7H","^8G"]]],"^W","Do not call this directly, use 'spec'"],"~$t_cljs$spec$alpha30515",["^ ","^1<",6,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","^2;","^N","docs/cljs/spec/alpha.cljs","^1C",true,"^1D",true,"^P",6,"^O",600,"^1E",false,"^1F","^1G","^1H",["^4",["^1?","^1A"]]],"~$invalid?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",163,"^P",7,"^Q",163,"^R",15,"^S",["^T",["^U",["^T",[["^2R"]]]]],"^W","tests the validity of a conform return value"],"^;","~$cljs.spec.alpha/invalid?","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[["^2R"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",163,"^11","^3C","^Q",163,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^2R"]]]]],"^W","tests the validity of a conform return value"],"~$amp-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1015,"^P",19,"^Q",1015,"^R",27,"^16",true,"^S",["^T",["^U",["^T",[["^3O","~$re-form","^3E","^3<"]]]]],"^W","Do not call this directly, use '&'"],"^;","~$cljs.spec.alpha/amp-impl","^N","docs/cljs/spec/alpha.cljs","^R",27,"^Y",["^T",[["^3O","^9@","^3E","^3<"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1015,"^11","^1Q","^Q",1015,"^13",4,"^14",true,"^S",["^T",["^U",["^T",[["^3O","^9@","^3E","^3<"]]]]],"^W","Do not call this directly, use '&'"],"~$pcat*",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",982,"^P",8,"^Q",982,"^R",13,"^1O",true,"^S",["^T",["^U",["^T",[[["~#cmap",[["^4<","~$&","~$pr","^53","^2L"],"~:ps",["~$k1","~$&","~$kr","^53","^2K"],"~:ks",["~$f1","~$&","~$fr","^53","^2M"],"~:forms","^2R","~:ret","~$rep+","~:rep+"]]]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/pcat*","^N","docs/cljs/spec/alpha.cljs","^R",13,"^Y",["^T",[["~$p__30660"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",982,"^11",["^4",["^12","^1Q","^1U"]],"^Q",982,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[[["^9C",[["^4<","~$&","^9D","^53","^2L"],"^9E",["^9F","~$&","^9G","^53","^2K"],"^9H",["^9I","~$&","^9J","^53","^2M"],"^9K","^2R","^9L","^9M","^9N"]]]]]]]],"~$alt*",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1029,"^P",8,"^Q",1029,"^R",12,"^1O",true,"^S",["^T",["^U",["^T",[["^2L","^2K","^2M"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/alt*","^N","docs/cljs/spec/alpha.cljs","^R",12,"^Y",["^T",[["^2L","^2K","^2M"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1029,"^11",["^4",["^12","^1Q","^1U"]],"^Q",1029,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^2L","^2K","^2M"]]]]]],"~$cat-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",994,"^P",19,"^Q",994,"^R",27,"^16",true,"^S",["^T",["^U",["^T",[["^2K","^2L","^2M"]]]]],"^W","Do not call this directly, use 'cat'"],"^;","~$cljs.spec.alpha/cat-impl","^N","docs/cljs/spec/alpha.cljs","^R",27,"^Y",["^T",[["^2K","^2L","^2M"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",994,"^11",["^4",["^12","^1Q","^1U"]],"^Q",994,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["^2K","^2L","^2M"]]]]],"^W","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",337,"^P",8,"^Q",337,"^R",25,"^1O",true,"^S",["^T",["^U",["^T",[["~$v","~$args"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/macroexpand-check","^N","docs/cljs/spec/alpha.cljs","^R",25,"^Y",["^T",[["~$v","^9V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",337,"^11","^1U","^Q",337,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$v","^9V"]]]]]],"~$reg-resolve",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",55,"^P",8,"^Q",55,"^R",19,"^1O",true,"^S",["^T",["^U",["^T",[["~$k"]]]]],"^W","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1O",true,"^;","~$cljs.spec.alpha/reg-resolve","^N","docs/cljs/spec/alpha.cljs","^R",19,"^Y",["^T",[["~$k"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",55,"^11",["^4",[null,"^12","^1U"]],"^Q",55,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$k"]]]]],"^W","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",275,"^P",7,"^Q",275,"^R",18,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value that fails to conform, returns an explanation as a string."],"^;","~$cljs.spec.alpha/explain-str","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["^V","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",275,"^11","~$string","^Q",275,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1477,"^P",3,"^Q",1477,"^R",20,"^1J",true,"^W","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^;","~$cljs.spec.alpha/*compile-asserts*","^N","docs/cljs/spec/alpha.cljs","^R",20,"^P",1,"^1J",true,"^O",1470,"^Q",1477,"^1F","^12","^W","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$with-gen",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",211,"^P",7,"^Q",211,"^R",15,"^S",["^T",["^U",["^T",[["^V","~$gen-fn"]]]]],"^W","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^;","~$cljs.spec.alpha/with-gen","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[["^V","^:4"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",211,"^11",["^4",["^2O","^12"]],"^Q",211,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","^:4"]]]]],"^W","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^62",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",40,"^P",4,"^Q",40,"^R",12,"^50","^1>","^W",null,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]]],"^50","^1>","^;","~$cljs.spec.alpha/conform*","^N","docs/cljs/spec/alpha.cljs","^R",12,"^Y",["^T",[["^V","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",39,"^11","^12","^Q",40,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","~$x"]]]]],"^W",null],"~$check-asserts?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1485,"^P",16,"^Q",1485,"^R",30,"^1F","^3C","^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the value set by check-asserts."],"^;","~$cljs.spec.alpha/check-asserts?","^N","docs/cljs/spec/alpha.cljs","^R",30,"^Y",["^T",[[]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1485,"^11","^3C","^Q",1485,"^13",0,"^1F","^3C","^14",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Returns the value set by check-asserts."],"~$noret?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1052,"^P",8,"^Q",1052,"^R",14,"^1O",true,"^S",["^T",["^U",["^T",[["^4<","~$pret"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/noret?","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["^4<","^::"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1052,"^11",["^4",["^3C","^12","^1U"]],"^Q",1052,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^4<","^::"]]]]]],"~$rep-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1006,"^P",19,"^Q",1006,"^R",27,"^16",true,"^S",["^T",["^U",["^T",[["^K","~$p"]]]]],"^W","Do not call this directly, use '*'"],"^;","~$cljs.spec.alpha/rep-impl","^N","docs/cljs/spec/alpha.cljs","^R",27,"^Y",["^T",[["^K","~$p"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1006,"^11",["^4",["^2O","^12","^1U"]],"^Q",1006,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^K","~$p"]]]]],"^W","Do not call this directly, use '*'"],"~$->t_cljs$spec$alpha30814",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^V","~$meta30815"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30814.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30814","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^V","^:?"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",5,"^10",false,"^2V","^2W","^O",1394,"^11","^2G","^13",2,"^14",true,"^S",["^T",["^U",["^T",[["^V","^:?"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30814."],"~$op-describe",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1143,"^P",8,"^Q",1143,"^R",19,"^1O",true,"^S",["^T",["^U",["^T",[["~$p"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/op-describe","^N","docs/cljs/spec/alpha.cljs","^R",19,"^Y",["^T",[["~$p"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1143,"^11",["^4",[null,"^2O","^12","^1U"]],"^Q",1143,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["~$p"]]]]]],"~$describe",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",206,"^P",7,"^Q",206,"^R",15,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","returns an abbreviated description of the spec as data"],"^;","~$cljs.spec.alpha/describe","^N","docs/cljs/spec/alpha.cljs","^R",15,"^Y",["^T",[["^V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",206,"^11",["^4",[null,"^12","^2I"]],"^Q",206,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",387,"^P",8,"^Q",387,"^R",17,"^1O",true,"^S",["^T",["^U",["^T",[["^K","^17","^1W","^1X","^1Y","~$v"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/explain-1","^N","docs/cljs/spec/alpha.cljs","^R",17,"^Y",["^T",[["^K","^17","^1W","^1X","^1Y","~$v"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",387,"^11",["^4",["^20","^12"]],"^Q",387,"^13",6,"^14",true,"^S",["^T",["^U",["^T",[["^K","^17","^1W","^1X","^1Y","~$v"]]]]]],"~$explain-out",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",264,"^P",7,"^Q",264,"^R",18,"^S",["^T",["^U",["^T",[["^1S"]]]]],"^W","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^;","~$cljs.spec.alpha/explain-out","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["^1S"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",264,"^11","^12","^Q",264,"^13",1,"^14",true,"^S",["^T",["^U",["^T",[["^1S"]]]]],"^W","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1214,"^P",8,"^Q",1214,"^R",14,"^1O",true,"^S",["^T",["^U",["^T",[["~$p","^66","^1W","^4Y","~$f"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/re-gen","^N","docs/cljs/spec/alpha.cljs","^R",14,"^Y",["^T",[["~$p","^66","^1W","^4Y","~$f"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1214,"^11",["^4",["^12","^1U"]],"^Q",1214,"^13",5,"^14",true,"^S",["^T",["^U",["^T",[["~$p","^66","^1W","^4Y","~$f"]]]]]],"~$filter-alt",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1020,"^P",8,"^Q",1020,"^R",18,"^1O",true,"^S",["^T",["^U",["^T",[["^2L","^2K","^2M","~$f"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/filter-alt","^N","docs/cljs/spec/alpha.cljs","^R",18,"^Y",["^T",[["^2L","^2K","^2M","~$f"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1020,"^11","^20","^Q",1020,"^13",4,"^14",true,"^S",["^T",["^U",["^T",[["^2L","^2K","^2M","~$f"]]]]]],"~$->t_cljs$spec$alpha30582",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^2M","^3E","^18","^56","^89","~$meta30583"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30582.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30582","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^2M","^3E","^18","^56","^89","^:N"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",5,"^10",false,"^2V","^2W","^O",780,"^11","^2@","^13",6,"^14",true,"^S",["^T",["^U",["^T",[["^2M","^3E","^18","^56","^89","^:N"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30582."],"~$and-preds",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",726,"^P",8,"^Q",726,"^R",17,"^1O",true,"^S",["^T",["^U",["^T",[["~$x","^3E","^2M"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/and-preds","^N","docs/cljs/spec/alpha.cljs","^R",17,"^Y",["^T",[["~$x","^3E","^2M"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",726,"^11",["^4",[null,"^2?"]],"^Q",726,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["~$x","^3E","^2M"]]]]]],"~$->t_cljs$spec$alpha30501",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^K","^8=","^8>","^18","^38","~$predx","~$dval","^2Q","~$meta30502"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30501.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30501","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^K","^8=","^8>","^18","^38","^:S","^:T","^2Q","^:U"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",6,"^10",false,"^2V","^2W","^O",556,"^11","^2A","^13",9,"^14",true,"^S",["^T",["^U",["^T",[["^K","^8=","^8>","^18","^38","^:S","^:T","^2Q","^:U"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30501."],"~$call-valid?",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1321,"^P",8,"^Q",1321,"^R",19,"^1O",true,"^S",["^T",["^U",["^T",[["~$f","^56","^9V"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/call-valid?","^N","docs/cljs/spec/alpha.cljs","^R",19,"^Y",["^T",[["~$f","^56","^9V"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1321,"^11",["^4",["^3C","^1U"]],"^Q",1321,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^56","^9V"]]]]]],"~$op-unform",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1089,"^P",8,"^Q",1089,"^R",17,"^1O",true,"^S",["^T",["^U",["^T",[["~$p","~$x"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/op-unform","^N","docs/cljs/spec/alpha.cljs","^R",17,"^Y",["^T",[["~$p","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1089,"^11",["^4",["^20","^12"]],"^Q",1089,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$p","~$x"]]]]]],"~$->t_cljs$spec$alpha30817",["^ ","^L",null,"^M",["^ ","^1D",true,"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^1H",["^4",["^1?","^1A"]],"^2V","^2W","^S",["^T",["^U",["^T",[["^K","^17","^18","^V","~$meta30818"]]]]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30817.","^N",null],"^1=",["^4",["^1>","^1?","^1@","^1A"]],"^;","~$cljs.spec.alpha/->t_cljs$spec$alpha30817","^N","docs/cljs/spec/alpha.cljs","^Y",["^T",[["^K","^17","^18","^V","^;0"]]],"^Z",null,"^[",["^T",[null,null]],"^1D",true,"^P",5,"^10",false,"^2V","^2W","^O",1414,"^11","^1:","^13",5,"^14",true,"^S",["^T",["^U",["^T",[["^K","^17","^18","^V","^;0"]]]]],"^1H",["^4",["^1?","^1A"]],"^W","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha30817."],"~$rep*",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",999,"^P",8,"^Q",999,"^R",12,"^1O",true,"^S",["^T",["^U",["^T",[["^4<","^4=","^2R","~$splice","^K"]]]]]],"^1O",true,"^;","~$cljs.spec.alpha/rep*","^N","docs/cljs/spec/alpha.cljs","^R",12,"^Y",["^T",[["^4<","^4=","^2R","^;3","^K"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",999,"^11",["^4",["^2O","^12","^1U"]],"^Q",999,"^13",5,"^14",true,"^S",["^T",["^U",["^T",[["^4<","^4=","^2R","^;3","^K"]]]]]],"^25",["^ ","^L",null,"^M",["^ ","^50","^1@","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^R",12,"^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["~$_"],["~$_","^K"]],"^S",["^T",[["~$_"],["~$_","^K"]]],"^[",["^T",[null,null]]],"^P",4,"^O",132,"^Q",132,"^S",["^T",["^U",["^T",[["~$_"],["~$_","^K"]]]]],"^W",null],"^50","^1@","^;","~$cljs.spec.alpha/specize*","^N","docs/cljs/spec/alpha.cljs","^R",12,"^3@",["^ ","^10",false,"^3A",2,"^13",2,"^Y",[["~$_"],["~$_","^K"]],"^S",["^T",[["~$_"],["~$_","^K"]]],"^[",["^T",[null,null]]],"^Y",[["~$_"],["~$_","^K"]],"^Z",null,"^3A",2,"^[",["^T",[null,null]],"^P",1,"^10",false,"^24",[["^ ","^3A",1,"^10",false,"^1F","^12"],["^ ","^3A",2,"^10",false,"^1F","^12"]],"^O",131,"^Q",132,"^13",2,"^14",true,"^S",["^T",[["~$_"],["~$_","^K"]]],"^W",null],"~$maybe-impl",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1048,"^P",19,"^Q",1048,"^R",29,"^16",true,"^S",["^T",["^U",["^T",[["~$p","^K"]]]]],"^W","Do not call this directly, use '?'"],"^;","~$cljs.spec.alpha/maybe-impl","^N","docs/cljs/spec/alpha.cljs","^R",29,"^Y",["^T",[["~$p","^K"]]],"^Z",null,"^16",true,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1048,"^11",["^4",["^2O","^12"]],"^Q",1048,"^13",2,"^14",true,"^S",["^T",["^U",["^T",[["~$p","^K"]]]]],"^W","Do not call this directly, use '?'"],"~$pcat",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",992,"^P",8,"^Q",992,"^R",12,"^1O",true,"^S",["^T",["^U",["^T",[["~$&","^2L"]]]]],"^3@",["^ ","^10",true,"^3A",0,"^13",0,"^Y",[["^T",["^2L"]]],"^S",["^T",[["~$&","^2L"]]],"^[",["^T",[null]]]],"^1O",true,"^;","~$cljs.spec.alpha/pcat","^N","docs/cljs/spec/alpha.cljs","^R",12,"^3@",["^ ","^10",true,"^3A",0,"^13",0,"^Y",[["^T",["^2L"]]],"^S",["^T",[["~$&","^2L"]]],"^[",["^T",[null]]],"^Y",[["^T",["^2L"]]],"^Z",null,"^3A",0,"^[",["^T",[null]],"^P",1,"^10",true,"^24",[["^ ","^3A",0,"^10",true,"^1F",["^4",["^12","^1Q","^1U"]]]],"^O",992,"^11","^12","^Q",992,"^13",0,"^14",true,"^S",["^T",[["~$&","^2L"]]]],"^64",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",42,"^P",4,"^Q",42,"^R",12,"^50","^1>","^W",null,"^S",["^T",["^U",["^T",[["^V","^1W","^1X","^1Y","~$x"]]]]]],"^50","^1>","^;","~$cljs.spec.alpha/explain*","^N","docs/cljs/spec/alpha.cljs","^R",12,"^Y",["^T",[["^V","^1W","^1X","^1Y","~$x"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",39,"^11","^12","^Q",42,"^13",5,"^14",true,"^S",["^T",["^U",["^T",[["^V","^1W","^1X","^1Y","~$x"]]]]],"^W",null],"~$validate-fn",["^ ","^L",null,"^M",["^ ","^N","/Users/evanjones/Code/cljs-practice/docs/cljs/spec/alpha.cljs","^O",1332,"^P",8,"^Q",1332,"^R",19,"^1O",true,"^S",["^T",["^U",["^T",[["~$f","^56","~$iters"]]]]],"^W","returns f if valid, else smallest"],"^1O",true,"^;","~$cljs.spec.alpha/validate-fn","^N","docs/cljs/spec/alpha.cljs","^R",19,"^Y",["^T",[["~$f","^56","^;<"]]],"^Z",null,"^[",["^T",[null,null]],"^P",1,"^10",false,"^O",1332,"^11",["^4",[null,"^12","^1U"]],"^Q",1332,"^13",3,"^14",true,"^S",["^T",["^U",["^T",[["~$f","^56","^;<"]]]]],"^W","returns f if valid, else smallest"]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^T",["~$cljs.spec.alpha/conformer",["^T",["~$fn*",["~$p1__30808#"],["^T",["~$cljs.core/zipmap",["^T",["~$cljs.core/map","~:cljs.spec.alpha/k","^;B"]],["^T",["^;D","~:cljs.spec.alpha/v","^;B"]]]]]],["^T",["^;A",["~$p1__30809#"],["^T",["^;D",["^T",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;E","~$k","^;F","~$v"]]],"^;G"]]]]]]]],"~:require-macros",["^ ","~$c","^?","^?","^?","~$s","^<","^<","^<","^D","^E","^E","^E"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^K","^2Q","^6O","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^8G","~$cljs.spec.alpha/+","~:p2","^9L","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","^;G","~:pred-exprs","^8Z","~:keys-pred","~:gen-max","~:shrunk","~:fn","~$cljs.spec.alpha/alt","^3=","~$cljs.core/vector?","^:S","^9N","~$cljs.core/=","~:opt-keys","^7=","^2X","~:cljs.spec.alpha/rep","~:pred","^:T","^6P","~:splice","^6Q","^2M","^2Y","~:cljs.spec.alpha/accept","^7<","~:else","^9H","^2Z","~$cljs.core/count","~$cljs.spec.alpha/and","^2[","^30","~$cljs.spec.alpha/cat","~:_","^90","~:maybe","~:via","~$cljs.spec.alpha/every","~:req-specs","~$cljs.spec.alpha/or","^18","~:cljs.spec.alpha/gfn","^6R","^7@","~$v","~:cljs.spec.alpha/spec","^31","~:conform-keys","^32","^7H","~$cljs.spec.alpha/fspec","^33","~$fn","~:amp","^42","^7A","^4Q","~$cljs.spec.alpha/nilable","^34","^;F","~$cljs.spec.alpha/tuple","^17","~$cljs.core/map?","^92","~:p1","^;C","~:cljs.spec.alpha/problems","^:U","^6S","~$%","^;D","^;?","~$method","~:distinct","^35","^6","^6T","~$cljs.spec.alpha/keys","^3O","^6U","^88","~:reason","^77","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^3E","^5P","^6V","~:req","^6W","^6X","~$nil?","^58","~:assertion-failed","^;A","~$cljs.core/<=","^6D","^8H","^7B","~:cljs.spec.alpha/amp","~:id","^:?","^6Y","~:min-count","~:kind","~:smallest","~$cljs.core/set?","~:count","^57","^;0","~$cljs.core/nil?","^8=","~:req-keys","^8>","~$k","^;E","^;H","~$cljs.core/list?","^6Z","^7>","~:opt-specs","~:cljs.spec.alpha/args","^8:","^7?","~$ifn?","~:pred-forms","^36","^V","^8","~$distinct?","~:max-count","^6[","^91","~:max-elements","^70","~$cljs.spec.alpha/multi-spec","^37","~$cljs.core/coll?","^38","~:num-elements","^56","^71","^39","~$apply","^72","^3F","^73","^74","^89","~:min-elements","^3:","^:N","^75","^93","~:cljs.spec.alpha/alt","~$cljs.core/or","^9K","~:cljs.spec.alpha/pred","^9","~:cljs.spec.alpha/nil","^9E","^;B","^3;","^;@","~:in","^8[","^76","~:accept","~$cljs.spec.alpha/&","~:opt","~:cljs.spec.alpha/pcat","^3<","~$cljs.spec.alpha/?"]],"~:order",["^4Q","^;Z","^;U","^<U","^<I","~~:_","^=M","^<4","^=I","^;H","^=E","^=5","^;V","^3O","^5P","^<3","^=2","^<2","^=B","^=:","^<H","^7<","^7=","^7>","^7?","^7@","^7A","^7B","^;?","^;@","^;A","^;B","^;C","^;D","^;E","^;F","^;G","~$k","~$v","^6D","^:?","^=F","^<W","^<K","^;0","^;M","^<X"]],"^W",null]